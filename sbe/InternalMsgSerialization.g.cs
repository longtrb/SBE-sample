// <auto-generated>
//     Generated SBE (Simple Binary Encoding) message codec
// </auto-generated>

#pragma warning disable 1591 // disable warning on missing comments
using System;
using System.Text;
using Org.SbeTool.Sbe.Dll;

namespace Sbe
{
    /// <summary>
    /// Description of a basic InternalMsgSerialization
    /// </summary>
    public sealed partial class InternalMsgSerialization
    {
        public const ushort BlockLength = (ushort)29;
        public const ushort TemplateId = (ushort)1;
        public const ushort SchemaId = (ushort)1;
        public const ushort SchemaVersion = (ushort)0;
        public const string SemanticType = "";

        private readonly InternalMsgSerialization _parentMessage;
        private DirectBuffer _buffer;
        private int _offset;
        private int _limit;
        private int _actingBlockLength;
        private int _actingVersion;

        public int Offset { get { return _offset; } }

        public InternalMsgSerialization()
        {
            _parentMessage = this;
        }

        public void WrapForEncode(DirectBuffer buffer, int offset)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = BlockLength;
            _actingVersion = SchemaVersion;
            Limit = offset + _actingBlockLength;
        }

        public void WrapForEncodeAndApplyHeader(DirectBuffer buffer, int offset,  MessageHeader headerEncoder)
        {
            headerEncoder.Wrap(buffer, offset, SchemaVersion);
            headerEncoder.BlockLength = BlockLength;
            headerEncoder.TemplateId = TemplateId;
            headerEncoder.SchemaId = SchemaId;
            headerEncoder.Version = SchemaVersion;
            
            WrapForEncode(buffer, offset + MessageHeader.Size);
        }

        public void WrapForDecode(DirectBuffer buffer, int offset, int actingBlockLength, int actingVersion)
        {
            _buffer = buffer;
            _offset = offset;
            _actingBlockLength = actingBlockLength;
            _actingVersion = actingVersion;
            Limit = offset + _actingBlockLength;
        }

        public int Size
        {
            get
            {
                return _limit - _offset;
            }
        }

        public int Limit
        {
            get
            {
                return _limit;
            }
            set
            {
                _buffer.CheckLimit(value);
                _limit = value;
            }
        }


        public const int IdId = 1;
    public const int IdSinceVersion = 0;
    public const int IdDeprecated = 0;
    public bool IdInActingVersion()
    {
        return _actingVersion >= IdSinceVersion;
    }

        public const int IdOffset = 0;

        public static string IdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const ulong IdNullValue = 0xffffffffffffffffUL;
        public const ulong IdMinValue = 0x0UL;
        public const ulong IdMaxValue = 0xfffffffffffffffeUL;

        public ulong Id
        {
            get
            {
                return _buffer.Uint64GetLittleEndian(_offset + 0);
            }
            set
            {
                _buffer.Uint64PutLittleEndian(_offset + 0, value);
            }
        }


        public const int AvailableId = 2;
    public const int AvailableSinceVersion = 0;
    public const int AvailableDeprecated = 0;
    public bool AvailableInActingVersion()
    {
        return _actingVersion >= AvailableSinceVersion;
    }

        public const int AvailableOffset = 8;

        public static string AvailableMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const byte AvailableNullValue = (byte)255;
        public const byte AvailableMinValue = (byte)0;
        public const byte AvailableMaxValue = (byte)254;

        public byte Available
        {
            get
            {
                return _buffer.Uint8Get(_offset + 8);
            }
            set
            {
                _buffer.Uint8Put(_offset + 8, value);
            }
        }


        public const int TypeId = 3;
    public const int TypeSinceVersion = 0;
    public const int TypeDeprecated = 0;
    public bool TypeInActingVersion()
    {
        return _actingVersion >= TypeSinceVersion;
    }

        public const int TypeOffset = 9;

        public static string TypeMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const uint TypeNullValue = 4294967295U;
        public const uint TypeMinValue = 0U;
        public const uint TypeMaxValue = 4294967294U;

        public uint Type
        {
            get
            {
                return _buffer.Uint32GetLittleEndian(_offset + 9);
            }
            set
            {
                _buffer.Uint32PutLittleEndian(_offset + 9, value);
            }
        }


        public const int QuantityId = 4;
    public const int QuantitySinceVersion = 0;
    public const int QuantityDeprecated = 0;
    public bool QuantityInActingVersion()
    {
        return _actingVersion >= QuantitySinceVersion;
    }

        public const int QuantityOffset = 13;

        public static string QuantityMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const double QuantityNullValue = double.NaN;
        public const double QuantityMinValue = 4.9E-324d;
        public const double QuantityMaxValue = 1.7976931348623157E308d;

        public double Quantity
        {
            get
            {
                return _buffer.DoubleGetLittleEndian(_offset + 13);
            }
            set
            {
                _buffer.DoublePutLittleEndian(_offset + 13, value);
            }
        }


        public const int PriceId = 5;
    public const int PriceSinceVersion = 0;
    public const int PriceDeprecated = 0;
    public bool PriceInActingVersion()
    {
        return _actingVersion >= PriceSinceVersion;
    }

        public const int PriceOffset = 21;

        public static string PriceMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const double PriceNullValue = double.NaN;
        public const double PriceMinValue = 4.9E-324d;
        public const double PriceMaxValue = 1.7976931348623157E308d;

        public double Price
        {
            get
            {
                return _buffer.DoubleGetLittleEndian(_offset + 21);
            }
            set
            {
                _buffer.DoublePutLittleEndian(_offset + 21, value);
            }
        }


        public const int SymbolId = 6;
        public const int SymbolSinceVersion = 0;
        public const int SymbolDeprecated = 0;
        public bool SymbolInActingVersion()
        {
            return _actingVersion >= SymbolSinceVersion;
        }

        public const int SymbolOffset = 29;

        public const string SymbolCharacterEncoding = "ASCII";
        public static Encoding SymbolResolvedCharacterEncoding = Encoding.GetEncoding(SymbolCharacterEncoding);


        public static string SymbolMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const int SymbolHeaderSize = 4;
        
        public int SymbolLength()
        {
            _buffer.CheckLimit(_parentMessage.Limit + 4);
            return (int)_buffer.Uint32GetLittleEndian(_parentMessage.Limit);
        }

        public int GetSymbol(byte[] dst, int dstOffset, int length) =>
            GetSymbol(new Span<byte>(dst, dstOffset, length));

        public int GetSymbol(Span<byte> dst)
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            int bytesCopied = Math.Min(dst.Length, dataLength);
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            _buffer.GetBytes(limit + sizeOfLengthField, dst.Slice(0, bytesCopied));

            return bytesCopied;
        }
        
        // Allocates and returns a new byte array
        public byte[] GetSymbolBytes()
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            byte[] data = new byte[dataLength];
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            _buffer.GetBytes(limit + sizeOfLengthField, data);

            return data;
        }

        public int SetSymbol(byte[] src, int srcOffset, int length) =>
            SetSymbol(new ReadOnlySpan<byte>(src, srcOffset, length));

        public int SetSymbol(ReadOnlySpan<byte> src)
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _parentMessage.Limit = limit + sizeOfLengthField + src.Length;
            _buffer.Uint32PutLittleEndian(limit, (uint)src.Length);
            _buffer.SetBytes(limit + sizeOfLengthField, src);

            return src.Length;
        }

        public string GetSymbol()
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            return _buffer.GetStringFromBytes(SymbolResolvedCharacterEncoding, limit + sizeOfLengthField, dataLength);
        }

        public void SetSymbol(string value)
        {
            var encoding = SymbolResolvedCharacterEncoding;
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            int byteCount = _buffer.SetBytesFromString(encoding, value, limit + sizeOfLengthField);
            _parentMessage.Limit = limit + sizeOfLengthField + byteCount;
            _buffer.Uint32PutLittleEndian(limit, (ushort)byteCount);
        }

        public const int ReqIdId = 7;
        public const int ReqIdSinceVersion = 0;
        public const int ReqIdDeprecated = 0;
        public bool ReqIdInActingVersion()
        {
            return _actingVersion >= ReqIdSinceVersion;
        }

        public const int ReqIdOffset = -1;

        public const string ReqIdCharacterEncoding = "ASCII";
        public static Encoding ReqIdResolvedCharacterEncoding = Encoding.GetEncoding(ReqIdCharacterEncoding);


        public static string ReqIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const int ReqIdHeaderSize = 4;
        
        public int ReqIdLength()
        {
            _buffer.CheckLimit(_parentMessage.Limit + 4);
            return (int)_buffer.Uint32GetLittleEndian(_parentMessage.Limit);
        }

        public int GetReqId(byte[] dst, int dstOffset, int length) =>
            GetReqId(new Span<byte>(dst, dstOffset, length));

        public int GetReqId(Span<byte> dst)
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            int bytesCopied = Math.Min(dst.Length, dataLength);
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            _buffer.GetBytes(limit + sizeOfLengthField, dst.Slice(0, bytesCopied));

            return bytesCopied;
        }
        
        // Allocates and returns a new byte array
        public byte[] GetReqIdBytes()
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            byte[] data = new byte[dataLength];
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            _buffer.GetBytes(limit + sizeOfLengthField, data);

            return data;
        }

        public int SetReqId(byte[] src, int srcOffset, int length) =>
            SetReqId(new ReadOnlySpan<byte>(src, srcOffset, length));

        public int SetReqId(ReadOnlySpan<byte> src)
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _parentMessage.Limit = limit + sizeOfLengthField + src.Length;
            _buffer.Uint32PutLittleEndian(limit, (uint)src.Length);
            _buffer.SetBytes(limit + sizeOfLengthField, src);

            return src.Length;
        }

        public string GetReqId()
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            return _buffer.GetStringFromBytes(ReqIdResolvedCharacterEncoding, limit + sizeOfLengthField, dataLength);
        }

        public void SetReqId(string value)
        {
            var encoding = ReqIdResolvedCharacterEncoding;
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            int byteCount = _buffer.SetBytesFromString(encoding, value, limit + sizeOfLengthField);
            _parentMessage.Limit = limit + sizeOfLengthField + byteCount;
            _buffer.Uint32PutLittleEndian(limit, (ushort)byteCount);
        }

        public const int CustIdId = 8;
        public const int CustIdSinceVersion = 0;
        public const int CustIdDeprecated = 0;
        public bool CustIdInActingVersion()
        {
            return _actingVersion >= CustIdSinceVersion;
        }

        public const int CustIdOffset = -1;

        public const string CustIdCharacterEncoding = "ASCII";
        public static Encoding CustIdResolvedCharacterEncoding = Encoding.GetEncoding(CustIdCharacterEncoding);


        public static string CustIdMetaAttribute(MetaAttribute metaAttribute)
        {
            switch (metaAttribute)
            {
                case MetaAttribute.Epoch: return "";
                case MetaAttribute.TimeUnit: return "";
                case MetaAttribute.SemanticType: return "";
                case MetaAttribute.Presence: return "required";
            }

            return "";
        }

        public const int CustIdHeaderSize = 4;
        
        public int CustIdLength()
        {
            _buffer.CheckLimit(_parentMessage.Limit + 4);
            return (int)_buffer.Uint32GetLittleEndian(_parentMessage.Limit);
        }

        public int GetCustId(byte[] dst, int dstOffset, int length) =>
            GetCustId(new Span<byte>(dst, dstOffset, length));

        public int GetCustId(Span<byte> dst)
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            int bytesCopied = Math.Min(dst.Length, dataLength);
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            _buffer.GetBytes(limit + sizeOfLengthField, dst.Slice(0, bytesCopied));

            return bytesCopied;
        }
        
        // Allocates and returns a new byte array
        public byte[] GetCustIdBytes()
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            byte[] data = new byte[dataLength];
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            _buffer.GetBytes(limit + sizeOfLengthField, data);

            return data;
        }

        public int SetCustId(byte[] src, int srcOffset, int length) =>
            SetCustId(new ReadOnlySpan<byte>(src, srcOffset, length));

        public int SetCustId(ReadOnlySpan<byte> src)
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _parentMessage.Limit = limit + sizeOfLengthField + src.Length;
            _buffer.Uint32PutLittleEndian(limit, (uint)src.Length);
            _buffer.SetBytes(limit + sizeOfLengthField, src);

            return src.Length;
        }

        public string GetCustId()
        {
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            _buffer.CheckLimit(limit + sizeOfLengthField);
            int dataLength = (int)_buffer.Uint32GetLittleEndian(limit);
            _parentMessage.Limit = limit + sizeOfLengthField + dataLength;
            return _buffer.GetStringFromBytes(CustIdResolvedCharacterEncoding, limit + sizeOfLengthField, dataLength);
        }

        public void SetCustId(string value)
        {
            var encoding = CustIdResolvedCharacterEncoding;
            const int sizeOfLengthField = 4;
            int limit = _parentMessage.Limit;
            int byteCount = _buffer.SetBytesFromString(encoding, value, limit + sizeOfLengthField);
            _parentMessage.Limit = limit + sizeOfLengthField + byteCount;
            _buffer.Uint32PutLittleEndian(limit, (ushort)byteCount);
        }

        public override string ToString()
        {
            var sb = new StringBuilder(100);
            this.BuildString(sb);
            return sb.ToString();
        }

        internal void BuildString(StringBuilder builder)
        {
            if (_buffer == null)
            {
                throw new ArgumentNullException("_buffer");
            }

            int originalLimit = this.Limit;
            this.Limit = _offset + _actingBlockLength;
            builder.Append("[InternalMsgSerialization](sbeTemplateId=");
            builder.Append(InternalMsgSerialization.TemplateId);
            builder.Append("|sbeSchemaId=");
            builder.Append(InternalMsgSerialization.SchemaId);
            builder.Append("|sbeSchemaVersion=");
            if (_parentMessage._actingVersion != InternalMsgSerialization.SchemaVersion)
            {
                builder.Append(_parentMessage._actingVersion);
                builder.Append('/');
            }
            builder.Append(InternalMsgSerialization.SchemaVersion);
            builder.Append("|sbeBlockLength=");
            if (_actingBlockLength != InternalMsgSerialization.BlockLength)
            {
                builder.Append(_actingBlockLength);
                builder.Append('/');
            }
            builder.Append(InternalMsgSerialization.BlockLength);
            builder.Append("):");

            builder.Append("Id=");
            builder.Append(this.Id);
            builder.Append('|');
            builder.Append("Available=");
            builder.Append(this.Available);
            builder.Append('|');
            builder.Append("Type=");
            builder.Append(this.Type);
            builder.Append('|');
            builder.Append("Quantity=");
            builder.Append(this.Quantity);
            builder.Append('|');
            builder.Append("Price=");
            builder.Append(this.Price);
            builder.Append('|');
            builder.Append("Symbol=");
            builder.Append('\'').Append(GetSymbol()).Append('\'');
            builder.Append('|');
            builder.Append("ReqId=");
            builder.Append('\'').Append(GetReqId()).Append('\'');
            builder.Append('|');
            builder.Append("CustId=");
            builder.Append('\'').Append(GetCustId()).Append('\'');

            this.Limit = originalLimit;

        }
    }
}
